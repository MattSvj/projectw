# 1. Родительский класс Животное
class Животное:
    def __init__(self, имя, дата_рождения):
        self.__имя = имя
        self.__дата_рождения = дата_рождения

    def получить_имя(self):
        return self.__имя

    def получить_дату_рождения(self):
        return self.__дата_рождения

# 2. Класс ДомашниеЖивотные, наследующий от Животное
class ДомашниеЖивотные(Животное):
    def __init__(self, имя, дата_рождения, команды):
        super().__init__(имя, дата_рождения)
        self.__команды = команды

    def получить_команды(self):
        return self.__команды

# 3. Класс ВьючныеЖивотные, наследующий от Животное
class ВьючныеЖивотные(Животное):
    def __init__(self, имя, дата_рождения, грузоподъемность):
        super().__init__(имя, дата_рождения)
        self.__грузоподъемность = грузоподъемность

    def получить_грузоподъемность(self):
        return self.__грузоподъемность

# 4. Класс Реестр для управления животными
class Реестр:
    def __init__(self):
        self.животные = []

    def завести_новое_животное(self, животное):
        self.животные.append(животное)

    def показать_животных(self):
        for животное in self.животные:
            print(f"Имя: {животное.получить_имя()}, Дата рождения: {животное.получить_дату_рождения()}")

    def показать_команды(self, имя):
        for животное in self.животные:
            if isinstance(животное, ДомашниеЖивотные) and животное.получить_имя() == имя:
                print(f"Команды: {животное.получить_команды()}")

    def обучить_новой_команде(self, имя, новая_команда):
        for животное in self.животные:
            if isinstance(животное, ДомашниеЖивотные) and животное.получить_имя() == имя:
                команды = животное.получить_команды()
                команды.append(новая_команда)
                print(f"Животное {имя} обучено новой команде: {новая_команда}")

# 5. Класс Счётчик с поддержкой try-with-resources
class Счётчик:
    def __init__(self):
        self._счёт = 0

    def add(self):
        self._счёт += 1
        print(f"Текущий счёт: {self._счёт}")

    def __enter__(self):
        # Возвращаем сам объект при входе в блок with
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Проверка на закрытие объекта
        if exc_type is None:
            if self._счёт == 0:
                raise Exception("Ошибка: счётчик не был использован в блоке with")
        else:
            print(f"Произошла ошибка: {exc_val}")

# Пример использования:
if __name__ == "__main__":
    # Пример работы с реестром
    реестр = Реестр()

    # Заводим несколько животных
    скорая_собака = ДомашниеЖивотные("Бобик", "2021-05-10", ["Сидеть", "Лежать"])
    реестр.завести_новое_животное(скорая_собака)

    # Пример работы с Счётчиком
    try:
        with Счётчик() as счётчик:
            счётчик.add()  # Добавляем животное
            # Дальше можно добавить другие действия с животным
    except Exception as e:
        print(f"Ошибка: {e}")
